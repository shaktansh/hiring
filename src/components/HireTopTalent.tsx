import React, { useState } from 'react';

interface HireTopTalentProps {
  onBack: () => void;
}

const HireTopTalent: React.FC<HireTopTalentProps> = ({ onBack }) => {
  const [form, setForm] = useState({
    title: '',
    company: '',
    location: '',
    description: '',
    requirements: '',
    salary: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState('');
  const [generatingDesc, setGeneratingDesc] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleAutoGenerateDescription = async () => {
    setGeneratingDesc(true);
    setError('');
    try {
      const res = await fetch('http://localhost:5000/generate-job-description', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: form.title,
          company: form.company,
          requirements: form.requirements
        })
      });
      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.error || 'Failed to generate description');
      }
      const data = await res.json();
      setForm(f => ({ ...f, description: data.description }));
    } catch (err: any) {
      setError(err.message);
    } finally {
      setGeneratingDesc(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    setSuccess(false);
    try {
      const res = await fetch('http://localhost:5000/jobs', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form)
      });
      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.error || 'Failed to post job');
      }
      setSuccess(true);
      setForm({ title: '', company: '', location: '', description: '', requirements: '', salary: '' });
    } catch (err: any) {
      setError(err.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center md:py-12 md:px-4">
      <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-4 sm:p-6 md:p-8 max-w-xl w-full mx-2 md:mx-0">
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-2 sm:mb-4 text-center">Hire Top Talent</h1>
        <p className="text-gray-600 mb-4 sm:mb-6 text-center text-base sm:text-lg">Post a job and reach top candidates instantly.</p>
        <form onSubmit={handleSubmit} className="space-y-3 sm:space-y-4">
          <div>
            <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Job Title *</label>
            <input
              type="text"
              name="title"
              value={form.title}
              onChange={handleChange}
              className="w-full p-3 sm:p-3.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm sm:text-base"
              required
              placeholder="e.g. Frontend Developer"
            />
          </div>
          <div>
            <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Company *</label>
            <input
              type="text"
              name="company"
              value={form.company}
              onChange={handleChange}
              className="w-full p-3 sm:p-3.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm sm:text-base"
              required
              placeholder="e.g. Acme Corp"
            />
          </div>
          <div>
            <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Location *</label>
            <input
              type="text"
              name="location"
              value={form.location}
              onChange={handleChange}
              className="w-full p-3 sm:p-3.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm sm:text-base"
              required
              placeholder="e.g. Remote, New York, etc."
            />
          </div>
          <div>
            <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Description *</label>
            <div className="flex flex-col sm:flex-row gap-2 items-stretch sm:items-center">
              <textarea
                name="description"
                value={form.description}
                onChange={handleChange}
                className="w-full p-3 sm:p-3.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm sm:text-base"
                required
                rows={3}
                placeholder="Describe the role, responsibilities, etc."
              />
              <button
                type="button"
                onClick={handleAutoGenerateDescription}
                disabled={generatingDesc || !form.title || !form.company}
                className="w-full sm:w-auto px-4 py-2 sm:px-4 sm:py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all disabled:opacity-50 disabled:cursor-not-allowed text-sm sm:text-base mt-2 sm:mt-0"
              >
                {generatingDesc ? 'Generating...' : 'Auto-generate'}
              </button>
            </div>
          </div>
          <div>
            <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Requirements</label>
            <textarea
              name="requirements"
              value={form.requirements}
              onChange={handleChange}
              className="w-full p-3 sm:p-3.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm sm:text-base"
              rows={2}
              placeholder="Skills, experience, etc."
            />
          </div>
          <div>
            <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Salary</label>
            <input
              type="text"
              name="salary"
              value={form.salary}
              onChange={handleChange}
              className="w-full p-3 sm:p-3.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm sm:text-base"
              placeholder="e.g. $80,000 - $100,000"
            />
          </div>
          {error && <div className="text-red-600 text-xs sm:text-sm">{error}</div>}
          {success && <div className="text-green-600 text-xs sm:text-sm">Job posted successfully!</div>}
          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full px-6 py-3 sm:py-3.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all disabled:opacity-50 disabled:cursor-not-allowed text-base sm:text-lg"
          >
            {isSubmitting ? 'Posting...' : 'Post Job'}
          </button>
        </form>
        <button
          onClick={onBack}
          className="mt-4 sm:mt-6 w-full px-6 py-3 sm:py-3.5 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-base sm:text-lg"
        >
          Back to Home
        </button>
      </div>
    </div>
  );
};

export default HireTopTalent; 